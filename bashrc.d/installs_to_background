# ~/.bash_functions

tmux_wrap_command() {
    local exe="$1"
    shift
    local session="installer-$(date +%s%N)"
    local tmpfile="/tmp/${session}_exitcode"

    # Check if tmux is installed
    if ! command -v tmux >/dev/null 2>&1; then
        echo "[ERROR] tmux is not installed. Running '$exe' normally."
        command "$exe" "$@"
        return
    fi

    # Check if already inside a tmux session
    if [ -n "$TMUX" ]; then
        echo "[INFO] Already inside tmux. Running '$exe' normally."
        command "$exe" "$@"
        return
    fi

    # Start tmux session detached, run command and exit
    tmux new-session -d -s "$session" "
        ($exe $@);
        echo \$? > $tmpfile;
        tmux kill-session -t \"$session\"
    "

    printf "[INFO] [%s] started in background tmux session [%s].\n" "$exe" "$session"
    printf "[INFO] You can attach with: tmux attach-session -t %s\n" "$session"
}

define_wrapper() {
    local tool="$1"
    eval "
        $tool() {
            if [[ \"$tool\" == \"git\" ]]; then
                # Only wrap git pull or git clone
                case \"\$1\" in
                    pull|clone)
                        tmux_wrap_command $tool \"\$@\"
                        ;;
                    *)
                        command $tool \"\$@\"
                        ;;
                esac
            else
                # Normal wrapping for other tools
                tmux_wrap_command $tool \"\$@\"
            fi
        }
    "
}

for cmd in brew apt apt-get dnf yum wget curl pip pip3 git cabal; do
    define_wrapper "$cmd"
done
